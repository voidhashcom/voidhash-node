/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from "../../../client.ts";
import type { RequestConfig, ResponseErrorConfig } from "../../../client.ts";
import type {
	UpdateProviderProductMutationRequest,
	UpdateProviderProductMutationResponse,
	UpdateProviderProductPathParams,
	UpdateProviderProduct400,
	UpdateProviderProduct401,
	UpdateProviderProduct403,
	UpdateProviderProduct404,
	UpdateProviderProduct409,
	UpdateProviderProduct412,
	UpdateProviderProduct429,
	UpdateProviderProduct500,
} from "../../models.ts";

function getUpdateProviderProductUrl({
	productId,
	providerId,
	providerProductKey,
}: {
	productId: UpdateProviderProductPathParams["productId"];
	providerId: UpdateProviderProductPathParams["providerId"];
	providerProductKey: UpdateProviderProductPathParams["providerProductKey"];
}) {
	return `/products/${productId}/provider-products/${providerId}/${providerProductKey}` as const;
}

/**
 * @description Update a provider product
 * {@link /products/:productId/provider-products/:providerId/:providerProductKey}
 */
export async function updateProviderProduct(
	{
		productId,
		providerId,
		providerProductKey,
	}: {
		productId: UpdateProviderProductPathParams["productId"];
		providerId: UpdateProviderProductPathParams["providerId"];
		providerProductKey: UpdateProviderProductPathParams["providerProductKey"];
	},
	data: UpdateProviderProductMutationRequest,
	config: Partial<RequestConfig<UpdateProviderProductMutationRequest>> & {
		client?: typeof client;
	} = {},
) {
	const { client: request = client, ...requestConfig } = config;

	const res = await request<
		UpdateProviderProductMutationResponse,
		ResponseErrorConfig<
			| UpdateProviderProduct400
			| UpdateProviderProduct401
			| UpdateProviderProduct403
			| UpdateProviderProduct404
			| UpdateProviderProduct409
			| UpdateProviderProduct412
			| UpdateProviderProduct429
			| UpdateProviderProduct500
		>,
		UpdateProviderProductMutationRequest
	>({
		method: "PUT",
		url: getUpdateProviderProductUrl({
			productId,
			providerId,
			providerProductKey,
		}).toString(),
		data,
		...requestConfig,
	});
	return res.data;
}

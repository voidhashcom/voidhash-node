/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from "../../../client.ts";
import type { RequestConfig, ResponseErrorConfig } from "../../../client.ts";
import type {
	PostProductsByProductIdProviderProductsMutationRequest,
	PostProductsByProductIdProviderProductsMutationResponse,
	PostProductsByProductIdProviderProductsPathParams,
} from "../../models.ts";

function getPostProductsByProductIdProviderProductsUrl({
	productId,
}: {
	productId: PostProductsByProductIdProviderProductsPathParams["productId"];
}) {
	return `/products/${productId}/provider-products` as const;
}

/**
 * @description Attach a new provider product
 * {@link /products/:productId/provider-products}
 */
export async function postProductsByProductIdProviderProducts(
	{
		productId,
	}: {
		productId: PostProductsByProductIdProviderProductsPathParams["productId"];
	},
	data?: PostProductsByProductIdProviderProductsMutationRequest,
	config: Partial<
		RequestConfig<PostProductsByProductIdProviderProductsMutationRequest>
	> & { client?: typeof client } = {},
) {
	const { client: request = client, ...requestConfig } = config;

	const res = await request<
		PostProductsByProductIdProviderProductsMutationResponse,
		ResponseErrorConfig<Error>,
		PostProductsByProductIdProviderProductsMutationRequest
	>({
		method: "POST",
		url: getPostProductsByProductIdProviderProductsUrl({
			productId,
		}).toString(),
		data,
		...requestConfig,
	});
	return res.data;
}

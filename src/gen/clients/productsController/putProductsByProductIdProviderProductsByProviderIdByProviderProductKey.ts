/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from "../../../client.ts";
import type { RequestConfig, ResponseErrorConfig } from "../../../client.ts";
import type {
	PutProductsByProductIdProviderProductsByProviderIdByProviderProductKeyMutationRequest,
	PutProductsByProductIdProviderProductsByProviderIdByProviderProductKeyMutationResponse,
	PutProductsByProductIdProviderProductsByProviderIdByProviderProductKeyPathParams,
} from "../../models.ts";

function getPutProductsByProductIdProviderProductsByProviderIdByProviderProductKeyUrl({
	productId,
	providerId,
	providerProductKey,
}: {
	productId: PutProductsByProductIdProviderProductsByProviderIdByProviderProductKeyPathParams["productId"];
	providerId: PutProductsByProductIdProviderProductsByProviderIdByProviderProductKeyPathParams["providerId"];
	providerProductKey: PutProductsByProductIdProviderProductsByProviderIdByProviderProductKeyPathParams["providerProductKey"];
}) {
	return `/products/${productId}/provider-products/${providerId}/${providerProductKey}` as const;
}

/**
 * @description Update a provider product
 * {@link /products/:productId/provider-products/:providerId/:providerProductKey}
 */
export async function putProductsByProductIdProviderProductsByProviderIdByProviderProductKey(
	{
		productId,
		providerId,
		providerProductKey,
	}: {
		productId: PutProductsByProductIdProviderProductsByProviderIdByProviderProductKeyPathParams["productId"];
		providerId: PutProductsByProductIdProviderProductsByProviderIdByProviderProductKeyPathParams["providerId"];
		providerProductKey: PutProductsByProductIdProviderProductsByProviderIdByProviderProductKeyPathParams["providerProductKey"];
	},
	data: PutProductsByProductIdProviderProductsByProviderIdByProviderProductKeyMutationRequest,
	config: Partial<
		RequestConfig<PutProductsByProductIdProviderProductsByProviderIdByProviderProductKeyMutationRequest>
	> & { client?: typeof client } = {},
) {
	const { client: request = client, ...requestConfig } = config;

	const res = await request<
		PutProductsByProductIdProviderProductsByProviderIdByProviderProductKeyMutationResponse,
		ResponseErrorConfig<Error>,
		PutProductsByProductIdProviderProductsByProviderIdByProviderProductKeyMutationRequest
	>({
		method: "PUT",
		url: getPutProductsByProductIdProviderProductsByProviderIdByProviderProductKeyUrl(
			{ productId, providerId, providerProductKey },
		).toString(),
		data,
		...requestConfig,
	});
	return res.data;
}

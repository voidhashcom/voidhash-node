/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from "../../../client.ts";
import type { RequestConfig, ResponseErrorConfig } from "../../../client.ts";
import type {
	DeleteProviderProductMutationResponse,
	DeleteProviderProductPathParams,
	DeleteProviderProduct400,
	DeleteProviderProduct401,
	DeleteProviderProduct403,
	DeleteProviderProduct404,
	DeleteProviderProduct409,
	DeleteProviderProduct412,
	DeleteProviderProduct429,
	DeleteProviderProduct500,
} from "../../models.ts";

function getDeleteProviderProductUrl({
	productId,
	providerId,
	providerProductKey,
}: {
	productId: DeleteProviderProductPathParams["productId"];
	providerId: DeleteProviderProductPathParams["providerId"];
	providerProductKey: DeleteProviderProductPathParams["providerProductKey"];
}) {
	return `/products/${productId}/provider-products/${providerId}/${providerProductKey}` as const;
}

/**
 * @description Delete a provider product
 * {@link /products/:productId/provider-products/:providerId/:providerProductKey}
 */
export async function deleteProviderProduct(
	{
		productId,
		providerId,
		providerProductKey,
	}: {
		productId: DeleteProviderProductPathParams["productId"];
		providerId: DeleteProviderProductPathParams["providerId"];
		providerProductKey: DeleteProviderProductPathParams["providerProductKey"];
	},
	config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
	const { client: request = client, ...requestConfig } = config;

	const res = await request<
		DeleteProviderProductMutationResponse,
		ResponseErrorConfig<
			| DeleteProviderProduct400
			| DeleteProviderProduct401
			| DeleteProviderProduct403
			| DeleteProviderProduct404
			| DeleteProviderProduct409
			| DeleteProviderProduct412
			| DeleteProviderProduct429
			| DeleteProviderProduct500
		>,
		unknown
	>({
		method: "DELETE",
		url: getDeleteProviderProductUrl({
			productId,
			providerId,
			providerProductKey,
		}).toString(),
		...requestConfig,
	});
	return res.data;
}

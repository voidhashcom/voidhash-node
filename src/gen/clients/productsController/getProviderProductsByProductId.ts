/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from "../../../client.ts";
import type { RequestConfig, ResponseErrorConfig } from "../../../client.ts";
import type {
	GetProviderProductsByProductIdQueryResponse,
	GetProviderProductsByProductIdPathParams,
	GetProviderProductsByProductId400,
	GetProviderProductsByProductId401,
	GetProviderProductsByProductId403,
	GetProviderProductsByProductId404,
	GetProviderProductsByProductId409,
	GetProviderProductsByProductId412,
	GetProviderProductsByProductId429,
	GetProviderProductsByProductId500,
} from "../../models.ts";

function getGetProviderProductsByProductIdUrl({
	productId,
}: { productId: GetProviderProductsByProductIdPathParams["productId"] }) {
	return `/products/${productId}/provider-products` as const;
}

/**
 * @description Get all provider products for a product
 * {@link /products/:productId/provider-products}
 */
export async function getProviderProductsByProductId(
	{
		productId,
	}: { productId: GetProviderProductsByProductIdPathParams["productId"] },
	config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
	const { client: request = client, ...requestConfig } = config;

	const res = await request<
		GetProviderProductsByProductIdQueryResponse,
		ResponseErrorConfig<
			| GetProviderProductsByProductId400
			| GetProviderProductsByProductId401
			| GetProviderProductsByProductId403
			| GetProviderProductsByProductId404
			| GetProviderProductsByProductId409
			| GetProviderProductsByProductId412
			| GetProviderProductsByProductId429
			| GetProviderProductsByProductId500
		>,
		unknown
	>({
		method: "GET",
		url: getGetProviderProductsByProductIdUrl({ productId }).toString(),
		...requestConfig,
	});
	return res.data;
}
